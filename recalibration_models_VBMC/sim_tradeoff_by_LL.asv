% check which parameter trades off with p_common by simulating NLL while
% varying other parameters

%% manage paths

restoredefaultpath;
currentDir= pwd;
[projectDir, ~]= fileparts(currentDir);
[tempDir, ~] = fileparts(projectDir);
dataDir = fullfile(tempDir,'temporalRecalibrationData');
addpath(genpath(fullfile(projectDir, 'data')));
addpath(genpath(fullfile(projectDir, 'utils')));
out_dir = fullfile(currentDir, mfilename);
if ~exist(out_dir, 'dir'); mkdir(out_dir); end

%% set up model

% set fixed & set-up parameters
model.num_ses = 9;
model.thres_R2 = 0.95;
model.expo_num_sim = 1e3; % number of simulation for exposure phase
model.expo_num_trial = 250; % number of *real* trials in exposure phase
model.num_bin  = 100; % numer of bin to approximate tau_shift distribution
model.bound_full = 10*1e3; % in second, the bound for prior axis
model.bound_int = 1.4*1e3; % in second, where measurements are likely to reside
model.num_sample = 1e3; % number of samples for simulating psychometric function with causal inference, only used in pmf_exp_CI
model.test_soa = [-0.5, -0.3:0.05:0.3, 0.5]*1e3;
model.sim_adaptor_soa  = [-0.7, -0.3:0.1:0.3, 0.7]*1e3;
model.toj_axis_finer = 0; % simulate pmf with finer axis
model.adaptor_axis_finer = 0; % simulate with more adpators
model.mode       = 'optimize';

%% load recalibration model results

num_p = 20; % number of grid of each parameter
model_str = 'cauInf_asym';
currModel = str2func(['nll_' model_str]);
sub_slc = [1:4, 6:10];
save_fig = 1;

result_folder = fullfile(dataDir, 'recalibration_models_VBMC', model_str);
addpath(genpath(fullfile(pwd, model_str)));
R = load_subject_data(result_folder, sub_slc, 'sub-*');

for ss = 1:numel(sub_slc)
    p = R{ss}.diag.post_mean;
    bestP(ss,:) = p;
    data{ss} = 
end

group_p = mean(bestP,1);
lb = R{1}.model.initVal.lb;
ub = R{1}.model.initVal.ub;
paraID = R{1}.model.initVal.paraID;

%% use group-average best estimates of parameters, vary p_common, alpha, sigma_C1, sigma_c2

para_combi       = [6,7; 6,8; 6,9]; % index of each parameter


for p_comb            = 1:size(para_combi, 2)

    idx_p1           = para_combi(p_comb,1);
    idx_p2           = para_combi(p_comb,2);

    % make a grid for two selected parameters
    p1s              = linspace(lb(idx_p1), ub(idx_p1), num_p+2);
    p2s              = linspace(lb(idx_p2), ub(idx_p2), num_p+2);

    % exclude bounds
    p1s = p1s(2:end-1);
    p2s = p2s(2:end-1);

    for ii = 1:numel(p1s)

        sim_p = group_p;
        sim_p(idx_p1) = p1s(ii);

        for jj = 1:numel(p2s)

            temp_model = currModel;
            temp_p = sim_p;
            temp_p(idx_p2) = p2s(jj);
            LL = temp_model(temp_p, model, []);
            temp_NLL(jj) = -LL;

        end

        NLL(p_comb, ii,:) = temp_NLL;

    end

end

%% plot

figure
set(gcf, 'Position', get(0, 'Screensize'));
set(gca, 'LineWidth', 1.5, 'FontSize', 15, 'TickDir', 'out')

for pp = 1:size(para_combi, 2)

    subplot(1,3,pp);

    d = squeeze(NLL(pp, :, :));
    imagesc(p2s, p1s, d, [min(d, [], "all"), min(d, [], "all")+4000]); hold on
    c = colorbar;
    c.Label.String   = 'NLL';
    %         c.Label.FontSize = 10;

    xticks(p2s)
    yticks(p1s)
    xlabel(paraID(idx_p2))
    ylabel(paraID(idx_p1))
    title('Group-average best parameters')

    if saveFig
        flnm = sprintf('tradeoff_comb %i', pp);
        saveas(gca, fullfile(outDir, flnm),'png')
    end

end
